{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"My MSc","text":"<pre><code> __  __         __  __ ____\n|  \\/  |_   _  |  \\/  / ___|  ___\n| |\\/| | | | | | |\\/| \\___ \\ / __|\n| |  | | |_| | | |  | |___) | (__\n|_|  |_|\\__, | |_|  |_|____/ \\___|\n        |___/\nMy master's thesis\n</code></pre> <p>Last edited: 2023-08-14 Website: http://efurlanm.github.io/msc22</p> <p>This repository contains the implementations made for my master's thesis, as well as miscellaneous materials and related information. The thesis explores three test cases implemented in the LNCC Santos Dumont supercomputer (SDumont), described bellow.</p>"},{"location":"#directories","title":"Directories","text":"<ul> <li>stencil - The five-point stencil test case, used in a heat transfer problem on a finite surface modeled by the Poison partial differential equation</li> <li>fft - The three dimensional fast Fourier transform test case, an algorithm that computes the multidimensional Fourier transform of an 3D array using a fast Fourier transform algorithm</li> <li>rforest - The random forest test case, an ensemble learning method for tasks such as classification and regression</li> <li>thesis - My original master's thesis in LaTeX format</li> </ul>"},{"location":"#useful-links","title":"Useful links","text":"<ul> <li> <p>SDumont main site - http://sdumont.lncc.br</p> </li> <li> <p>SDumont manual. User manual from LNCC (in Portuguese) - http://sdumont.lncc.br/support_manual.php</p> </li> <li> <p>Using the SDumont. Manual in the form of slides, including some more details (in Portuguese) - http://www.linea.gov.br/wp-content/uploads/lineadbfiles/apresentacao/17%20-%20Usando%20o%20santos%20dumont%20(16_9).pdf</p> </li> <li> <p>Cadase project. Tutorial with screenshots, part of the Cadase project, which aims to perform numerical modeling and simulations, using HPC techniques, of applications belonging to the energy sector (in Portuguese) - http://sites.usp.br/cadase/recursos-computacionais/tutoriais-sdumont</p> </li> <li> <p>IDeepS project - http://github.com/vsantjr/IDeepS</p> </li> </ul>"},{"location":"#acknowledgments","title":"Acknowledgments","text":"<p>Most of the information about SDumont contained in this repository was obtained during INPE's graduate program, and in the project approved by the LNCC with resources from the government of Brazil, without which this work would not be possible.</p>"},{"location":"#license","title":"License","text":"<p>Attribution-NonCommercial 4.0 International - CC BY-NC 4.0</p>"},{"location":"envset/","title":"Environment setup","text":"<p>This page shows a simple step-by-step, starting from scratch, to configure a basic and functional JupyterLab (JL) environment for use on the local machine (desktop PC or laptop) and also on the LNCC Santos Dumont (SDumont) supercomputer on a login node. This is the configuration I am using in my works.</p> <p>Some of the reasons to run JL on SDumont are:</p> <ul> <li>Use the interactive features of the JL/Python environment directly on the target machine</li> <li>Use the packages, tools, and hardware available on SDumont</li> <li>Debug directly on the machine where the application will run</li> <li>Use tools that generate native code (like Cython, F2FY, Numba, etc.) directly on the target machine</li> <li>View and analyze results as they are ready, in such a way as to reduce development time</li> </ul> <p>This page is not intended to be complete, it is a simple step by step that I use to work in SDumont. For this setup, I'm conveniently using a laptop with VirtualBox installed and a virtual machine (VM) running Kubuntu 20.04. In this text, the terms \"virtual machine\" and \"local machine\" are used interchangeably, meaning the same thing.</p> <p>What will be seen next is:</p> <ul> <li>Installing the Anaconda distribution (on the local machine), and running JL</li> <li>VPN configuration for accessing the SDumont, using the os's network manager</li> <li>Configuring SSH to use key instead of password, and also using the ControlMaster feature that keeps the connection alive</li> <li>Configure the conda environment, and install the Syncthing (ST) package</li> <li>Configure ST to keep directories synchronized between machines;</li> <li>Run JL on both local and SDumont machines</li> </ul>"},{"location":"envset/#anaconda-install-local-machine","title":"Anaconda install (local machine)","text":"<p>Let's start by installing the Anaconda distribution on the local machine, and for that we are going to download it, and this can be done either through the browser or the CLI:</p> <p></p> <p>Download and install (CLI):</p> <pre><code>$ cd Downloads/\n$ wget https://repo.anaconda.com/archive/Anaconda3-2021.11-Linux-x86_64.sh\n$ sh chmod +x Anaconda3-2021.11-Linux-x86_64.sh\n$ bash Anaconda3-2021.11-Linux-x86_64.sh -b\n</code></pre> <p> </p> <p>Running JupyterLab to check if it's already working (the web browser will run automatically and the JL will appear):</p> <pre><code>$ source ~/anaconda3/etc/profile.d/conda.sh\n$ conda activate\n$ jupyter-lab --NotebookApp.token=''\n</code></pre> <p></p> <p>At this point the Anaconda distribution is installed and JupyterLab is running on the local machine. </p>"},{"location":"envset/#vpn-setup-local-machine","title":"VPN setup (local machine)","text":"<p>Let's now configure the network manager to access the SDdumont VPN. The steps to be followed are contained in the detailed information provided by the LNCC, and only part of it is reproduced here. The following text assumes that you already have an SDdumont account.</p> <p>We will need the network-manager-vpnc:</p> <pre><code>$ sudo apt install network-manager-vpnc\n</code></pre> <p>After that, enter the Network Manager, Configure Network Connections, add a connection, and chose Cisco Compatible VPN (vpnc):</p> <p></p> <p>The following screen must be completed according to the instructions provided by the LNCC:</p> <p></p> <p>We are now going to configure the route to change the behavior of the traffic and make sure that only the resources you want from SDumont pass through this interface, and not all the traffic, and in this way it is possible to use the internet connection of the local machine normally without interference:</p> <p></p> <p>Insert (+ Add) the Address 146.134.143.249, Netmask (accept the default), select \"Use only for resources on this connection\", \"Ignore automatically obatined routes\", and save the connection (OK):</p> <p> </p> <p>Then, through the network manager, make the connection, and it should appear connected:</p> <p></p>"},{"location":"envset/#ssh-setup","title":"SSH setup","text":"<p>The next step is to configure SSH to use keys and not passwords, and the steps include creating the key and copying it to the SDdumont user area. </p> <p>The <code>~/.ssh/config</code> file on the local machine would look like this:</p> <pre><code>...\n\nServerAliveInterval 120\nHost sd\n        HostName login.sdumont.lncc.br\n        User &lt;username&gt;\n        ControlMaster auto\n        ControlPath ~/.ssh/remote_sd\n\n...\n</code></pre> <p>The <code>&lt;username&gt;</code> needs to be replaced with the username. The option called ControlMaster allows sharing of multiple sessions on a single network connection, so when connecting to the cluster (using <code>ssh -Nf sd</code>) the connection is active, and all subsequent ssh sessions (including svn, rsync , etc. ) do not need authentication. At the end of use, it is necessary to end the connection with the command <code>ssh -O exit sd</code>. Note that the <code>&lt;username&gt;</code> is the username being used on the machine, and will vary from case to case.</p> <p>Creating the key:</p> <pre><code>$ ssh-keygen -t ed25519\nGenerating public/private ed25519 key pair.\nEnter file in which to save the key (/home/&lt;username&gt;/.ssh/id_ed25519): \nCreated directory '/home/&lt;username&gt;/.ssh'.\nEnter passphrase (empty for no passphrase): \nEnter same passphrase again: \nYour identification has been saved in /home/&lt;username&gt;/.ssh/id_ed25519\nYour public key has been saved in /home/&lt;username&gt;/.ssh/id_ed25519.pub\nThe key fingerprint is:\nSHA256:+yk+H(...)/0AuM x@vm001\nThe key's randomart image is:\n+--[ED25519 256]--+\n|   . . .         |\n|  . o + .        |\n| . + + + o       |\n|o.. * . + o      |\n|o. o . ESo .     |\n|.o  .    ...     |\n|o o     o o      |\n|.=.o ..o+* o     |\n|ooO+.o=BO**      |\n+----[SHA256]-----+\n</code></pre> <p>Copy the SSH key to the user area on the SDdumont:</p> <pre><code>$ ssh-copy-id &lt;username&gt;@login.sdumont.lncc.br\n/usr/bin/ssh-copy-id: INFO: Source of key(s) to be installed: \"/home/&lt;username&gt;/.ssh/id_ed25519.pub\"\nThe authenticity of host 'login.sdumont.lncc.br (146.134.143.249)' can't be established.\nECDSA key fingerprint is SHA256:FZQP(...)JnyI.\nAre you sure you want to continue connecting (yes/no/[fingerprint])? yes\n/usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed\n/usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- if you are prompted now it is to install the new keys\n&lt;username&gt;@login.sdumont.lncc.br's password:\n\nNumber of key(s) added: 1\n\nNow try logging into the machine, with:   \"ssh '&lt;username&gt;@login.sdumont.lncc.br'\"\nand check to make sure that only the key(s) you wanted were added.\n</code></pre> <p>At this point, if everything was configured correctly, it is already possible to access without password:</p> <pre><code>$ ssh sd\nLast login: Thu Apr  7 18:32:18 2022 from 146.134.223.189\n________________________________________________________________\n  _____ _____                              _   \n / ____|  __ \\                            | |  \n | (___| |  | |_   _ _ __ ___   ___  _ __ | |_ \n \\___ \\| |  | | | | | '_ ` _ \\ / _ \\| '_ \\| __|\n ____) | |__| | |_| | | | | | | (_) | | | | |_ \n|_____/|_____/ \\__,_|_| |_| |_|\\___/|_| |_|\\__|\n\n_________________________________________________________________\n\nManual: http://sdumont.lncc.br/support_manual.php\n_________________________________________________________________\nThe available softwares can be listed with the command: module avail\nIf there's something missing, please get in contact with helpdesk-sdumont@lncc.br\n_________________________________________________________________\n\nO termo de uso do Supercomputador SDdumont foi atualizado em 10/10/2019.\nAo continuar voc\u00ea concorda com todos os termos descritos nele.\n\nTermo de uso: http://sdumont.lncc.br/terms.php\n_________________________________________________________________\n[&lt;username&gt;@sdumont13 ~]$\n</code></pre>"},{"location":"envset/#conda-environment-sdumont","title":"Conda environment (SDumont)","text":"<p>The next step now is to configure a Conda Environment (CE) to be used on the SDdumont. SDdumont already has some versions of the Anaconda distribution installed, selectable via the <code>module</code> command, and we will use the most current one (2020.11):</p> <pre><code>$ module avail -t 2&gt;&amp;1 | grep -i Anaconda\nanaconda2/2018.12\nanaconda2/2019.10\nanaconda3/2018.12\nanaconda3/2020.11\n$ module load anaconda3\n$ conda list anaconda$\n# packages in environment at /scratch/app/anaconda3/2020.11:\n#\n# Name                    Version                   Build  Channel\nanaconda                  2020.11                  py38_0\n</code></pre> <p>Let's create an empty conda environment in the user area and activate it nested with the existing environment, so we can install any missing packages. The new conda environment will be created in the scratch/ area so that programs running on the execution nodes can access it.</p> <pre><code>$ conda create --prefix /scratch${HOME#/prj}/env01\nCollecting package metadata (current_repodata.json): done\nSolving environment: done\n\n\n==&gt; WARNING: A newer version of conda exists. &lt;==\ncurrent version: 4.9.2\nlatest version: 4.12.0\n\nPlease update conda by running\n\n    $ conda update -n base -c defaults conda\n\n\n\n## Package Plan ##\n\nenvironment location: /scratch/&lt;project&gt;/&lt;username&gt;/env01\n\n\n\nProceed ([y]/n)?\n\nPreparing transaction: done\nVerifying transaction: done\nExecuting transaction: done\n#\n# To activate this environment, use\n#\n#     $ conda activate /scratch/&lt;project&gt;/&lt;username&gt;/env01\n#\n# To deactivate an active environment, use\n#\n#     $ conda deactivate\n</code></pre> <p>And to activate and access the nested environment, we first configure the shell:</p> <pre><code>$ source /scratch/app/anaconda3/2020.11/etc/profile.d/conda.sh\n</code></pre> <p>And then we activate the nested environment:</p> <pre><code>$ conda activate --stack /scratch${HOME#/prj}/env01\n</code></pre> <p>Now we can update or install missing packages.</p>"},{"location":"envset/#st-setup-sdumont","title":"ST setup (SDumont)","text":"<p>The main purpose of <code>syncthing</code> (ST) is to have a mirror directory automatically and constantly synchronized between the local machine and SDdumont, so that we don't have to remember to copy files from one machine to another, or worry about what else is updated where, thus automating a part of the workflow. ST also works similarly to JL, with client/server architecture and web interface. The ST needs to be installed on both the local machine and the SDdumont, and this can be done using <code>conda</code>. Let's start with the SDdumont, assuming the nested conda environment is already active:</p> <pre><code>$ conda install -c conda-forge syncthing\nCollecting package metadata (current_repodata.json): done\nSolving environment: done\n\n\n==&gt; WARNING: A newer version of conda exists. &lt;==\ncurrent version: 4.9.2\nlatest version: 4.12.0\n\nPlease update conda by running\n\n    $ conda update -n base -c defaults conda\n\n\n\n## Package Plan ##\n\nenvironment location: /scratch/&lt;project&gt;/&lt;username&gt;/env01\n\nadded / updated specs:\n    - syncthing\n\n\nThe following packages will be downloaded:\n\n    package                    |            build\n    ---------------------------|-----------------\n    syncthing-1.19.2           |       ha8f183a_0         8.2 MB  conda-forge\n    ------------------------------------------------------------\n                                        Total:         8.2 MB\n\nThe following NEW packages will be INSTALLED:\n\nsyncthing          conda-forge/linux-64::syncthing-1.19.2-ha8f183a_0\n\n\nProceed ([y]/n)?\n\n\nDownloading and Extracting Packages\nsyncthing-1.19.2     | 8.2 MB    | ############################################# | 100% \nPreparing transaction: done\nVerifying transaction: done\nExecuting transaction: done\n</code></pre>"},{"location":"envset/#st-setup-local-machine","title":"ST setup (local machine)","text":"<p>Let's do the same on the local machine, but in this case assuming the conda environment is not active yet:</p> <pre><code>x@vm001:~$ source ~/anaconda3/etc/profile.d/conda.sh\nx@vm001:~$ conda activate\n(base) x@vm001:~$ conda install -c conda-forge syncthing\nCollecting package metadata (current_repodata.json): done\nSolving environment: done\n\n\n==&gt; WARNING: A newer version of conda exists. &lt;==\ncurrent version: 4.10.3\nlatest version: 4.12.0\n\nPlease update conda by running\n\n    $ conda update -n base -c defaults conda\n\n\n\n## Package Plan ##\n\nenvironment location: /home/&lt;username&gt;/anaconda3\n\nadded / updated specs:\n    - syncthing\n\n\nThe following packages will be downloaded:\n\n    package                    |            build\n    ---------------------------|-----------------\n    conda-4.12.0               |   py39hf3d152e_0        1014 KB  conda-forge\n    python_abi-3.9             |           2_cp39           4 KB  conda-forge\n    syncthing-1.19.2           |       ha8f183a_0         8.2 MB  conda-forge\n    ------------------------------------------------------------\n                                        Total:         9.2 MB\n\nThe following NEW packages will be INSTALLED:\n\npython_abi         conda-forge/linux-64::python_abi-3.9-2_cp39\nsyncthing          conda-forge/linux-64::syncthing-1.19.2-ha8f183a_0\n\nThe following packages will be UPDATED:\n\nconda              pkgs/main::conda-4.10.3-py39h06a4308_0 --&gt; conda-forge::conda-4.12.0-py39hf3d152e_0\n\n\nProceed ([y]/n)?\n\n\nDownloading and Extracting Packages\nconda-4.12.0         | 1014 KB   | ############################################# | 100% \nsyncthing-1.19.2     | 8.2 MB    | ############################################# | 100% \npython_abi-3.9       | 4 KB      | ############################################# | 100% \nPreparing transaction: done\nVerifying transaction: done\nExecuting transaction: done\n</code></pre>"},{"location":"envset/#jl-local-machine","title":"JL (local machine)","text":"<p>At this point the basic configuration is done and we can finally get into JL. Let's first do this on the local machine:</p> <pre><code>$ source ~/anaconda3/etc/profile.d/conda.sh\n$ conda activate\n$ syncthing --no-browser --gui-address=0.0.0.0:8384 &gt; ~/8384.log 2&gt;&amp;1 &amp;\n$ cd ~/Sync\n$ jupyter-lab --no-browser --ip=0.0.0.0 --NotebookApp.token=\"\" --port=8888 &gt; ~/8888.log 2&gt;&amp;1 &amp;\n</code></pre> <p>The <code>--no-browser</code> option means do not automatically run the web browser, <code>--gui-address</code> chooses external access and port number. For JL, <code>--ip=0.0.0.0</code> allows access from another machine, <code>--NotebookApp.token=\"\"</code> allows use without security token, <code>--port=8888</code> sets the port to use, <code>8888.log</code> is the log file, and <code>&amp;</code> makes the server run in the background (to stop it: <code>killall jupyter-lab</code>).</p> <p>The first time ST is run, it automatically creates the <code>~/Sync</code> directory. We enter this directory, configure the environment and run the JL server. Note that the use of <code>--NotebookApp.token=\"\"</code> should be avoided for security reasons, but its correct use is beyond the scope of this introduction. </p> <p>When running the web browser and typing the addresses <code>http://localhost:8888</code> and <code>http://localhost:8384</code> in two different tabs, the result should be:</p> <p></p> <p>Basically what we did was four things (in sequence):</p> <ul> <li>Configure the CE</li> <li>Run ST server</li> <li>Enter the working directory</li> <li>Run JL server</li> </ul> <p>The ST should show:</p> <p></p> <p>Enter the <code>Actions</code> menu choose <code>Show ID</code> and write down the ID to use later.</p> <p>From this point on, most tasks can be done within JL as it has a file browser, terminal, notebook, text editor, table of contents, pdf viewer, etc. Note that there are several possible ways to use JL, and I'm only using one of them. To access the SDumont we will use the JL, the only thing that will be done \"outside\" will be the VPN connection that will be made using the system's network manager.</p>"},{"location":"envset/#jl-sdumont","title":"JL (SDumont)","text":"<p>To access SDumont we will choose two random ports, one for JL (35655), and another for ST (28863). First we activate the VPN in the system's network manager, then using a notebook in the JL, we activate the SSH connection, then already in the login node we activate the CE, then the STing, we enter the working directory (~/Sync), we run the JL server, and finally, on the local machine, we create the two tunnels to access the JL and STThing that are running on SDumont. The commands below are running inside a notebook cell in JL on the local machine:</p> <pre><code>%%bash\nssh -Nf sd\nssh -T sd &lt;&lt;'EOF'\nhostname\nmodule load anaconda3\nsource /scratch/app/anaconda3/2020.11/etc/profile.d/conda.sh\nconda activate --stack /scratch${HOME#/prj}/env01\nsyncthing --no-browser --gui-address=0.0.0.0:28863 &gt; ~/28863.log 2&gt;&amp;1 &amp;\ncd ~/Sync\njupyter-lab --no-browser --port=35655 --ip=0.0.0.0 --NotebookApp.token=\"\" &gt; ~/35655.log 2&gt;&amp;1 &amp;\nEOF\nssh -NfTL 8385:localhost:28863 sd\nssh -NfTL 8889:localhost:35655 sd\n</code></pre> <p>And the result is shown below, the first two tabs are referring to the local machine, and the last two are JL and ST running on SDumont. The JL tab running on SDumont may take a while to appear:</p> <p></p> <p>JL running on SDdumont:</p> <p></p> <p>ST running on SDdumont:</p> <p></p> <p>In this example above, we have the servers running with the interface being accessed in the web browser on the local machine at the addresses:</p> server local machine SDumont JL localhost:8888 localhost:8889 ST localhost:8384 localhost:8385 <p>The next step now is to sync the <code>~/Sync</code> directories. To do this, in ST, we click on + Add Remote Device and enter the ID that we had previously noted:</p> <p></p> <p>On the other machine a warning appears, just add the device:</p> <p></p> <p>Repeat adding device on the other machine:</p> <p></p> <p>Add the folder:</p> <p></p> <p>Repeat on the other machine:</p> <p></p> <p>To not have to keep adding directories, one option is to configure it to add automatically:</p> <p></p> <p>Once the ST is configured, when creating or modifying a file on one machine, the other is automatically updated. In the picture below, on the left side is a browser window showing the JL running on the local machine editing a notebook connect.ipynb, and on the right side window the same file is shown on the JL running on SDdumont:</p> <p></p> <p>The notebook file \"connect.ipynb\" is available at: http://github.com/efurlanm/msc22/blob/main/docs/Notebooks/connect.ipynb</p> <p>At this point we already have the basic tools configured, and from now on to access SDumont the workflow is:</p> <ul> <li>run JL and ST servers on local machine</li> <li>load the Notebook (if not already) containing the commands to connect to SDumont and run the servers</li> <li>turn on VPN in system connection manager</li> <li>use SSH with the ControlMaster feature to keep the connection alive</li> <li>run JL and ST servers on SDumont</li> <li>enable SSH tunnels</li> <li>use web browser to run clients</li> </ul>"},{"location":"envset/#conclusion","title":"Conclusion","text":"<p>In this page we saw how to configure and run the JL environment on the SDumont supercomputer, starting from scratch. In the end we were left with two JL servers running, one on a local machine, the other on SDumont, and their web interfaces were accessible in two web browser windows on the local machine. Additionally the ST file synchronization tool has been configured.</p>"},{"location":"Notebooks/connect/","title":"Connection to the SDumont","text":"<ul> <li>Don't forget to turn on the VPN first, using the system's network manager</li> </ul> <p>Connect:</p> In\u00a0[1]: Copied! <pre>%%bash\nssh -Nf sd\nssh -T sd &lt;&lt;'EOF'\nhostname\nmodule load anaconda3\nsource /scratch/app/anaconda3/2020.11/etc/profile.d/conda.sh\nconda activate --stack /scratch${HOME#/prj}/env01\nsyncthing --no-browser --gui-address=0.0.0.0:28863 &gt; ~/28863.log 2&gt;&amp;1 &amp;\ncd ~/Sync\njupyter-lab --no-browser --port=35655 --ip=0.0.0.0 --NotebookApp.token=\"\" &gt; ~/35655.log 2&gt;&amp;1 &amp;\nEOF\nssh -NfTL 8385:localhost:28863 sd\nssh -NfTL 8889:localhost:35655 sd\n</pre> %%bash ssh -Nf sd ssh -T sd &lt;&lt;'EOF' hostname module load anaconda3 source /scratch/app/anaconda3/2020.11/etc/profile.d/conda.sh conda activate --stack /scratch${HOME#/prj}/env01 syncthing --no-browser --gui-address=0.0.0.0:28863 &gt; ~/28863.log 2&gt;&amp;1 &amp; cd ~/Sync jupyter-lab --no-browser --port=35655 --ip=0.0.0.0 --NotebookApp.token=\"\" &gt; ~/35655.log 2&gt;&amp;1 &amp; EOF ssh -NfTL 8385:localhost:28863 sd ssh -NfTL 8889:localhost:35655 sd <pre>sdumont14\n</pre> <p>Access to JL and ST is done using the web browser and the addresses:</p> <ul> <li>JL: http://localhost:8889</li> <li>ST: http://localhost:8385</li> </ul> <p>Disconnect:</p> In\u00a0[2]: Copied! <pre>%%bash\nssh sd 'pkill -u ${USER} -f syncthing'\nssh sd 'pkill -u ${USER} -f jupyter'\nssh -O exit sd\npkill -f 8385:\npkill -f 8889:\n</pre> %%bash ssh sd 'pkill -u ${USER} -f syncthing' ssh sd 'pkill -u ${USER} -f jupyter' ssh -O exit sd pkill -f 8385: pkill -f 8889: <ul> <li>Don't forget to turn off the VPN, using the system's network manager</li> </ul>"},{"location":"Notebooks/connect/#connection-to-the-sdumont","title":"Connection to the SDumont\u00b6","text":"<p>This notebook is available at: http://github.com/efurlanm/msc22/blob/main/docs/Notebooks/connect.ipynb</p>"}]}